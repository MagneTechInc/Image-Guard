extends layout

block content

    script.
        window.onload = onReady;

        var user_info;
        var retry_chance = 3;

        var can;
        var ctx;
        var img;
        var clickX;
        var clickY;
        var selected1;
        var selected2;
        var blockSize = 160;
        var piecesArray;

        var can1;
        var ctx1;
        var piecesArray1;

        var col = 2;
        var row = 2;

        var correctOrder;
        var position;
        var sequence;



        function onReady() {
            can = document.getElementById('myCanvas');
            can1 = document.getElementById('yourCanvas')

            if (navigator.userAgent.toLowerCase().indexOf('firefox') >= 0 || !can.getContext) {
                can.style.display = 'none';
                can1.style.display = 'none';
                document.getElementById('sorry').style.display = 'inline';
                return;
            }

            ctx = can.getContext('2d');
            ctx1 = can1.getContext('2d');
            img = new Image();
            img.onload = onImage1Load;
            //img.src = '/images/cat.png';

        }

        function onImage1Load() {
            piecesArray = new Array();
            piecesArray1 = new Array();
            correctOrder = new Array();
            position = new Array();
            sequence = new Array();
            var r;
            for (var i = 0; i < col; i++) {
                for (var j = 0; j < row; j++) {
                    r = new Rectangle(i * blockSize, j * blockSize, i * blockSize + blockSize, j * blockSize + blockSize);
                    piecesArray.push(r);
                    correctOrder.push(r);
                    position.push(i * row + j);
                }
            }

            //scrambleArray(piecesArray, 30);
            drawImage();
        }

        function Rectangle(left, top, right, bottom) {
            this.left = left;
            this.top = top;
            this.right = right;
            this.bottom = bottom;

            this.width = right - left;
            this.height = bottom - top;
        }

        function drawImage() {
            ctx.clearRect(0, 0, 320, 320);
            ctx1.clearRect(0, 0, 320, 320);
            var r;
            for (var i = 0; i < col; i++) {
                for (var j = 0; j < row; j++) {
                    r = piecesArray[i * row + j];
                    if (r != undefined) {
                        ctx.drawImage(img, r.left, r.top, r.width, r.height, i * blockSize, j * blockSize, blockSize, blockSize);
                    }
                    r = piecesArray1[i * row + j];
                    if (r != undefined) {
                        ctx1.drawImage(img, r.left, r.top, r.width, r.height, i * blockSize, j * blockSize, blockSize, blockSize);
                    }
                }
            }
        }

        function highlightRect(drawX, drawY) {
            ctx.beginPath();
            ctx.moveTo(drawX, drawY);
            ctx.lineTo(drawX + blockSize, drawY);
            ctx.lineTo(drawX + blockSize, drawY + blockSize);
            ctx.lineTo(drawX, drawY + blockSize);
            ctx.lineTo(drawX, drawY);
            ctx.lineWidth = 2;

            // set line color
            ctx.strokeStyle = "#ff0000";
            ctx.stroke();
        }

        function swapRects(r1, r2) {
            var index1;
            var index2;
            var temp = r1;

            index1 = piecesArray.indexOf(r1);
            index2 = piecesArray.indexOf(r2);

            piecesArray[index1] = r2;
            piecesArray[index2] = temp;

            temp = position[index1];
            position[index1] = position[index2];
            position[index2] = temp;
        }

        function onCanvasClick(evt) {
            clickX = evt.offsetX;
            clickY = evt.offsetY;

            var drawX = Math.floor(clickX / blockSize);
            var drawY = Math.floor(clickY / blockSize);
            var index = drawX * row + drawY;
            var targetRect = piecesArray[index];

            if (targetRect != undefined) {
                var drawHighlight = true;

                drawX *= blockSize;
                drawY *= blockSize;

                if (selected1 != undefined && selected2 != undefined) {
                    selected1 = selected2 = undefined;
                }

                if (selected1 == undefined) {
                    selected1 = targetRect;
                }
                else {
                    selected2 = targetRect;
                    swapRects(selected1, selected2);
                    drawHighlight = false;
                }

                drawImage();

                if (drawHighlight)
                    highlightRect(drawX, drawY);
            }
        }

        function onCanvasClick1(evt) {
            clickX = evt.offsetX;
            clickY = evt.offsetY;

            var drawX = Math.floor(clickX / blockSize);
            var drawY = Math.floor(clickY / blockSize);
            var index = drawX * row + drawY;
            var targetRect = piecesArray1[index];

            if (targetRect == undefined) {

                drawX *= blockSize;
                drawY *= blockSize;

                if (selected1 != undefined) {
                    if (selected2 == undefined) {
                        var index1 = piecesArray.indexOf(selected1);
                        piecesArray[index1] = undefined;
                        piecesArray1[index] = selected1;
                        selected1 = undefined;
                        sequence.push(position[index1]);
                        isWin();
                    }
                }

                drawImage();
            }

        }

        function isWin() {
            var match = true;
            var isEmpty = true;

            for (var i = 0; i < piecesArray.length; i++) {
                if (piecesArray[i] != undefined) {
                    isEmpty = false;
                    break;
                }
            }

            for (var i = 0; i < piecesArray.length; i++) {
                if (piecesArray1[i] != correctOrder[i]) {
                    match = false;
                    break;
                }
            }

            if (match) {
                var password = "";
                for (var i = 0; i < sequence.length; i++) {
                    password += sequence[i];
                }
                $.ajax({
                    url: "/users/signup_password",
                    type: 'POST',
                    dataType: 'json',
                    data: {
                        username: user_info.username,
                        email: user_info.email,
                        img_path: user_info.img_path,
                        password: password
                    },
                    success: function (data) {
                        window.location.replace('/');
                    },
                    error: function (error) {
                        alert("Sign up error\nError code: "+ error.status + "\nPlease try it again");
                        window.location.replace('/signup');
                    }
                });

            }
            else if (isEmpty) {
                drawImage();
                if (retry_chance-->0)
                {
                    img.src = user_info.img_path;
                    $('#retry_warning').show().empty().append('<strong>Sign up Warning!</strong>' +
                            ' Puzzle pieces were in the wrong position.<br>' +
                            ' Please try again: Left chances: ' + retry_chance);
                }
                else
                {
                    //TODO send ajax request to delete the img
                    window.location.replace('/signup');
                }
            }
            else {
                console.log("not complete yet");
            }

        }

        $(document).ready(function(){
            $('#signupForm').submit(function(){
                $(this).ajaxSubmit({
                    error: function(err){
                        alert(err.status);
                        if (err.status == 403)
                        {
                            alert("User exists\nTry another one");
                            window.location.replace('/signup');
                        }
                    },
                    success: function(data){
                        console.log("------------");
                        console.log(data);
                        user_info = data;
                        $('#username').prop('disabled', true);
                        $('#email').prop('disabled', true);
                        $('#pic').prop('disabled', true);
                        $('#submitBtn').prop('disabled', true);
                        $('#puzzleDiv').show();
                        img.src = data.img_path;
                    }
                });
                return false;
            });
        });

    div(class="col-sm-offset-2 col-sm-8 ")
        div(class="panel panel-default")
            div(class="panel-heading" style="text-align:center")
                h1 Sign-Up
            div(class="panel-body")
                form(role="form" class="form-horizontal" method="post" action="/users/signup" enctype="multipart/form-data" id="signupForm")
                    div(class="form-group")
                        label(for="username" class="control-label col-sm-2") Username:
                        div(class="col-sm-10")
                            input(type="name" class="form-control" placeholder="Enter Username" id="username" name="username")
                    div(class="form-group")
                        label(for="email" class="control-label col-sm-2") Email:
                        div(class="col-sm-10")
                            input(type="email" class="form-control" placeholder="m@m.m" id="email" name="email")
                    div(class="form-group")
                        label(for="pic" class="control-label col-sm-2") Picture:
                        div(class="col-sm-10")
                            input(type="file" class="form-control" id="pic" name="pic")
                    div(class="form-group")
                        div(class="col-sm-offset-2 col-sm-4")
                            button(type="submit" class="btn btn-default" id="submitBtn") Submit
                        div(class="col-sm-6" style="text-align:right")
                            a(href="password_reset") Reset Password
                            input(type="hidden"  id="origin" name="origin" value="signup")

                div(class= "container-fluid" id="puzzleDiv" style="display: none;")
                    .row
                        .col-sm-12
                            div(class="alert alert-warning fade in" id="retry_warning" style="display: none;")
                    .row
                        div(class= "col-sm-6")
                            img(id = "sorry" src = "/images/sorry.jpg" style = "display:none;")
                            canvas(id = "myCanvas" width = "320" height = "320" style = "margin:0 auto; width:320px; height:320px; border: 4px solid #cc6699;" onclick = "onCanvasClick(event);")
                        div(class= "col-sm-6")
                            canvas(id = "yourCanvas" width = "320" height = "320" style = "margin:0 auto; width:320px; height:320px; border: 4px solid #cc6699;" onclick = "onCanvasClick1(event);")