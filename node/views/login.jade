extends layout

block content
    script.
        window.onload = onReady;
        var user_info;
        var can;
        var ctx;
        var img;
        var clickX;
        var clickY;
        var selected1;
        var selected2;
        var retry_chance = 3;
        var blockSize = 160;
        var piecesArray = new Array();

        var piecesArray1 = new Array();

        var col = 2;
        var row = 2;

        var correctOrder = new Array();
        var position = new Array();
        var sequence = new Array();
        function onReady() {
            $("#canvasContainer")[0].hidden = true;
            $(document).keypress(function (e) {
                if (e.which == 13) {
                    $.ajax({
                        url: "/users/login",
                        type: 'POST',
                        dataType: 'json',
                        data: {
                            username: $("#username")[0].value
                        },
                        success: function (data) {
                            user_info = data;
                            load(data.img_path);
                            $("#username")[0].disabled = true;
                        },
                        error: function (error) {
                            alert(error);
                            $("#canvasContainer")[0].hidden = true;
                        }
                    });
                }
            });
        }
        function load(img_path) {
            $("#canvasContainer")[0].hidden = false;
            can = document.getElementById('myCanvas');

            if (navigator.userAgent.toLowerCase().indexOf('firefox') >= 0 || !can.getContext) {
                can.style.display = 'none';
                document.getElementById('sorry').style.display = 'inline';
                return;
            }

            ctx = can.getContext('2d');
            img = new Image();
            img.onload = onImage1Load;
            img.src = img_path;
        }

        function onImage1Load() {
            var r;
            piecesArray = new Array();
            piecesArray1 = new Array();
            correctOrder = new Array();
            position = new Array();
            sequence = new Array();
            for (var i = 0; i < col; i++) {
                for (var j = 0; j < row; j++) {
                    r = new Rectangle(i * blockSize, j * blockSize, i * blockSize + blockSize, j * blockSize + blockSize);
                    piecesArray.push(r);
                    correctOrder.push(r);
                    position.push(i * row + j);
                }
            }

            scrambleArray(piecesArray, 30);
            drawImage();
        }

        function Rectangle(left, top, right, bottom) {
            this.left = left;
            this.top = top;
            this.right = right;
            this.bottom = bottom;

            this.width = right - left;
            this.height = bottom - top;
        }

        function scrambleArray(ar, times) {
            var count = 0;
            var temp;
            var index1;
            var index2;

            while (count < times) {
                index1 = Math.floor(Math.random() * piecesArray.length);
                index2 = Math.floor(Math.random() * piecesArray.length);

                temp = piecesArray[index1];
                piecesArray[index1] = piecesArray[index2];
                piecesArray[index2] = temp;

                temp = position[index1];
                position[index1] = position[index2];
                position[index2] = temp;

                count++;
            }
        }

        function drawImage() {
            ctx.clearRect(0, 0, 320, 320);
            var r;
            for (var i = 0; i < col; i++) {
                for (var j = 0; j < row; j++) {
                    r = piecesArray[i * row + j];
                    if (r != undefined) {
                        ctx.drawImage(img, r.left, r.top, r.width, r.height, i * blockSize, j * blockSize, blockSize, blockSize);
                    }
                }
            }
        }

        function highlightRect(drawX, drawY) {
            ctx.beginPath();
            ctx.moveTo(drawX, drawY);
            ctx.lineTo(drawX + blockSize, drawY);
            ctx.lineTo(drawX + blockSize, drawY + blockSize);
            ctx.lineTo(drawX, drawY + blockSize);
            ctx.lineTo(drawX, drawY);
            ctx.lineWidth = 2;

            // set line color
            ctx.strokeStyle = "#ff0000";
            ctx.stroke();
        }

        function swapRects(r1, r2) {
            var index1;
            var index2;
            var temp = r1;

            index1 = piecesArray.indexOf(r1);
            index2 = piecesArray.indexOf(r2);

            piecesArray[index1] = r2;
            piecesArray[index2] = temp;

            temp = position[index1];
            position[index1] = position[index2];
            position[index2] = temp;
        }

        function onCanvasClick(evt) {
            clickX = evt.offsetX;
            clickY = evt.offsetY;

            var drawX = Math.floor(clickX / blockSize);
            var drawY = Math.floor(clickY / blockSize);
            var index = drawX * row + drawY;
            var targetRect = piecesArray[index];

            if (targetRect != undefined) {
                var drawHighlight = true;

                drawX *= blockSize;
                drawY *= blockSize;

                ctx.clearRect(0, 0, 320, 320);

                if (selected1 != undefined && selected2 != undefined) {
                    selected1 = selected2 = undefined;
                }

                if (selected1 == undefined) {
                    selected1 = targetRect;
                }
                else {
                    selected2 = targetRect;
                    swapRects(selected1, selected2);
                    drawHighlight = false;
                    //
                    var index1 = piecesArray.indexOf(selected1);
                    piecesArray1[index] = selected1;
                    selected1 = undefined;
                    selected2 = undefined;
                    sequence.push(position[index1]);
                    isWin();
                }
                drawImage();

                if (drawHighlight)
                    highlightRect(drawX, drawY);
            }
        }

        function isWin() {
            var match = true;

            for (var i = 0; i < piecesArray.length; i++) {
                if (piecesArray1[i] != correctOrder[i]) {
                    match = false;
                    break;
                }
            }
            if (sequence.length == piecesArray.length) {
                if (match) {
                    var password = "";
                    for (var i = 0; i < sequence.length; i++) {
                        password += sequence[i];
                    }
                    $.ajax({
                        url: "/users/login_password",
                        type: 'POST',
                        dataType: 'json',
                        data: {
                            username: $("#username")[0].value,
                            password: password
                        },
                        success: function (data) {
                            window.location.replace('/');
                        },
                        error: function (error) {
                            img.src = user_info.img_path;
                            $('#retry_warning').show().empty().append('<strong>Sequence Warning!</strong>' +
                                    ' Puzzle pieces were in the wrong position. <br>' + JSON.parse(error.responseText).message);
                        }
                    });
                }
                else {
                    console.log("not complete yet");
                    if (retry_chance-- > 0) {
                        img.src = user_info.img_path;
                        $('#retry_warning').show().empty().append('<strong>Login up Warning!</strong>' +
                                ' Puzzle pieces were in the wrong position.<br>' +
                                ' Please try again: Left chances: ' + retry_chance);
                    }
                    else {
                        //TODO send ajax request to delete the img
                        window.location.replace('/login');
                    }
                }
            }


        }
    div(class="col-sm-offset-2 col-sm-5 ")
        div(class="panel panel-default")
            div(class="panel-heading" style="text-align:center")
                h1 Login
            div(class="panel-body")
                form(class="form-horizontal" action="javascript:void(0);")
                    div(class="form-group")
                        label(for="username" class="control-label col-sm-2") Username:
                        div(class="col-sm-10")
                            input(type="name" class="form-control" placeholder="Enter Username" id="username" name="username")
                    div(class="container-fluid" id="canvasContainer")
                        .row
                            .col-sm-12
                                div(class="alert alert-warning fade in" id="retry_warning" style="display: none;")
                        div(class="form-group")
                            div(class="col-sm-6")
                                img(id="sorry" src="/images/sorry.jpg" style="display:none;")
                                canvas(id="myCanvas" width="320" height="320" style="margin:0 auto; width:320px; height:320px; border: 4px solid #cc6699;" onclick="onCanvasClick(event);")
                        div(class="form-group")
                            div(class="col-sm-4" style="text-align:right")
                                a(href="password_reset") Reset Password